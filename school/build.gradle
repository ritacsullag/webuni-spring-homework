import org.codehaus.groovy.runtime.GStringImpl

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.hibernate.orm" version "6.2.5.Final"
    id "org.openapi.generator" version "6.6.0"
    id "io.mateo.cxf-codegen" version "1.2.1"
}

group = 'com.csullagrita'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    wsimport
}

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
//    implementation ('org.springframework.boot:spring-boot-starter-web'){
//        exclude group: "com.sun.xml.bind"
//    }
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'

//    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.infinispan:infinispan-hibernate-cache-v60'
    //infinispan cache
    implementation 'org.infinispan:infinispan-spring6-embedded'

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'com.querydsl:querydsl-core:5.0.0'
    implementation 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    implementation 'org.hibernate.orm:hibernate-envers'
    //shedLock is for more scheduling-thread
    implementation 'net.javacrumbs.shedlock:shedlock-spring:5.5.0'
    implementation 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template:5.5.0'

    //Create open-api doc
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    //openapi-generator
    implementation "org.openapitools:openapi-generator-gradle-plugin:6.6.0"
    implementation 'io.swagger:swagger-annotations:1.6.11'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'org.jetbrains:annotations:24.0.0'

    //websocket with STOMP (Simple Text Orientated Messaging Protocol
    implementation 'org.springframework:spring-websocket'
    implementation 'org.springframework:spring-messaging'

    //jaxws
    implementation 'com.sun.xml.ws:jaxws-ri:4.0.1'
    wsimport "com.sun.xml.ws:jaxws-tools:4.0.1"
    //jaxB and its friends, imports would be great with this
    implementation "com.sun.xml.ws:jaxws-rt:4.0.1"
    implementation "javax.xml.ws:jaxws-api:2.3.1"
    implementation 'org.apache.cxf:cxf-spring-boot-starter-jaxws:4.0.2'

    //topic usage async messages
    implementation 'org.springframework.boot:spring-boot-starter-artemis:3.1.1'

    //spring security
    implementation 'org.springframework.boot:spring-boot-starter-security:3.1.1'
    implementation 'com.auth0:java-jwt:4.4.0'
    //Websocket with JWT
    implementation 'org.springframework.security:spring-security-messaging'
    //oauth2
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:3.1.2'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    annotationProcessor 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'

    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}


sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', "${buildDir}/generated/src/main/java/", "${buildDir}/wsdl"]
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

ext {
    generatedDir = "${buildDir}/wsdl" as GStringImpl
    generatedSourcesDir = "${generatedDir}/java" as GStringImpl
}

tasks.register('generateSources') {
    ext.wsdlFile = "http://localhost:8081/services/students?wsdl"
    ext.wsdlLocation = "http://localhost:8081/services/students?wsdl"
    ext.bindingDir = "${projectDir}/src/main/java/com/csullagrita/school/wsdl"

    doLast {
        ant {
            taskdef name: "wsimport",
                    classname: "com.sun.tools.ws.ant.WsImport",
                    classpath: configurations.wsimport.asPath

            mkdir(dir: generatedSourcesDir)

            wsimport(sourcedestdir: generatedSourcesDir,
                    wsdl: wsdlFile,
                    wsdlLocation: wsdlLocation,
                    keep: true,
                    xnocompile: true) {
                binding(dir: bindingDir, includes: "*.xml")

            }
        }
    }
}

tasks.register('cleanGenerated', Delete) {
    delete generatedDir
}

clean.dependsOn cleanGenerated

compileJava {
    dependsOn generateSources
    source generatedSourcesDir
}

openApiGenerate {
    generatorName.set("spring")
    inputSpec.set("$rootDir/src/main/openapi/api-docs.yaml")
    outputDir.set("$buildDir/generated")
    apiPackage.set("com.csullagrita.school.api")
    modelPackage.set("com.csullagrita.school.api.model")
    configOptions.set([
            useTags       : true.toString(),
            dateLibrary   : "java8-datetime",
            configPackage : "com.csullagrita.school.api.model",
            interfaceOnly : true.toString(),
            useSpringBoot3: true.toString()
    ])
}
//
//tasks.named('bootJar') {
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//}